import requests
import json
import time

# Start a session
session = requests.Session()

# Define the login URL and credentials
login_url = 'https://pvc003.zucchettihc.it:4445/cba/gen/auth/login?_dc=1724242420714'
headers = {
    'Accept': '*/*',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'Referer': 'https://pvc003.zucchettihc.it:4445/cba/login.html',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',
    'X-Requested-With': 'XMLHttpRequest',
}

login_data = {
    'username': 'VGVyYXBpYSBWZXJh',  # Base64 encoded username (Terapia Vera)
    'password': 'UkJvcnJvbWVhMjAyNA==',  # Base64 encoded password (RBorromea2024)
    'encrypt': 'F',
    'cdc': '',
    'code': '',
    'source': 'sipcar2',
    'oAuthType': '',
    'page': '1',
    'start': '0',
    'limit': '25'
}

# Perform login
login_response = session.post(login_url, headers=headers, data=login_data, verify=False)

if login_response.status_code == 200:
    print("Login successful.")
    
    # Extract JWT token from the response body
    response_json = login_response.json()
    jwt_token = response_json['data'].get('token')
    
    if jwt_token:
        headers['CBA-JWT'] = f'Bearer {jwt_token}'
        print("JWT token found in body and added to headers.")
    else:
        print("JWT token not found in the response body.")
        exit()
else:
    print(f"Login failed with status code: {login_response.status_code}")
    exit()

# Step 1: Obtain the idAvanzamentoElaborazione
new_id_url = 'https://pvc003.zucchettihc.it:4445/cba/css/cs/ws/genCss/statoElab/newId?_dc=1724250168071'
new_id_response = session.get(new_id_url, headers=headers, verify=False)

if new_id_response.status_code == 200:
    new_id_json = new_id_response.json()
    id_avanzamento_elaborazione = new_id_json['data']
    print(f"Obtained idAvanzamentoElaborazione: {id_avanzamento_elaborazione}")
else:
    print(f"Failed to obtain idAvanzamentoElaborazione with status code: {new_id_response.status_code}")
    exit()

# Step 2: Define the URL for the PDF request
url = 'https://pvc003.zucchettihc.it:4445/cba/css/cs/ws/report/terapie'

# Request body for Nucleo A
data_nucleo_a = {
    'format': 'pdf',
    'ricoveri': '',
    'reparti': '13,27',  # Nucleo A
    'dataDal': '2024-08-01T00:00:00',
    'dataAl': '2024-08-31T23:59:00',
    'viaDiSomm': 'AS,CC,CO,CU,DE,DM,DT,ED,EU,EV,GE,ID,IM,IN,IZ,NA,ND,NN,OD,OF,ON,OR,OT,PA,RE,SC,SD,SG,SL,SP,TD,TP,UN,VG,AD,OS,IPD,PAT,SMI',
    'terapie': 'T',
    'terapieAB': 'T',
    'tipoTerapia': '',
    'tipoRagg': '3',
    'tipoOrd': '0',
    'idProfilo': '3',
    'mensile': 'T',
    'noteMensile': 'T',
    'reportDaEsportare': 'false',
    'idAvanzamentoElaborazione': id_avanzamento_elaborazione  # Use the dynamically obtained ID
}

# Step 3: Send request for Nucleo A and print the entire response
response_nucleo_a = session.post(url, headers=headers, data=data_nucleo_a, verify=False, timeout=300)

print("Server Response for Nucleo A:")
print(response_nucleo_a.text)  # Print the entire response to inspect it

if response_nucleo_a.status_code == 200:
    response_data = response_nucleo_a.json()
    if 'data' in response_data and response_data['data'] is not None:
        job_id = response_data['data'].get('idAvanzamentoElaborazione')
        if job_id:
            print(f"Job ID: {job_id}")
            # Continue with polling or other logic as needed
        else:
            print("Job ID not found in the response.")
    else:
        print("The server response did not contain the expected data field.")
else:
    print(f"Nucleo A request failed with status code: {response_nucleo_a.status_code}")
